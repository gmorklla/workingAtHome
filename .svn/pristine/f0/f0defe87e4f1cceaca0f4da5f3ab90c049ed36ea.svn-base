import {Component, Input, OnInit, ViewChild} from '@angular/core';
import {MatDialog, MatPaginator, MatSort, MatTableDataSource, Sort} from '@angular/material';
import {VariableDesignService} from '../../../services/variable/variable-design.service';
import {VariableDesign} from '../../../models/variable/variable-design.model';
import {UtilsService} from '../../../../../../../campaigns/src/lib/services/utils/utils.service';
import {FormControl} from '@angular/forms';
import {ConfirmationDialogComponent} from '../../../../../../../campaigns/src/lib/components/dialog/confirmation-dialog/confirmation-dialog.component';
import {AlertService} from '../../../../../../../campaigns/src/lib/services/alert/alert.service';
import {Messages} from '../../../../shared/messages';
import {RuleVariableDialogComponent} from '../../rule-dialog/rule-variable-dialog/rule-variable-dialog.component';
import {DataType} from '../../../models/variable/data-type.model';

@Component({
  selector: 'app-rule-variable-table',
  templateUrl: './rule-variable-table.component.html',
  styleUrls: ['./rule-variable-table.component.css']
})
export class RuleVariableTableComponent implements OnInit {

  @Input() private designId: string;
  @Input() private windowId: string;
  @Input() private listDataType: DataType[];

  search = new FormControl('');

  displayedColumns: string[] = ['id', 'name', 'description', 'dataType', 'value', 'control', 'delete'];
  dataSource: MatTableDataSource<VariableDesign>;

  @ViewChild(MatPaginator) paginator: MatPaginator;
  @ViewChild(MatSort) sort: MatSort;

  constructor(private variableDesignService: VariableDesignService,
              private alertService: AlertService,
              private utilsService: UtilsService,
              private dialog: MatDialog) {
  }

  ngOnInit() {
    this.fn_getAllVariableDesign();
  }

  private fn_getAllVariableDesign(): void {
    this.variableDesignService.fn_getAll(this.designId).subscribe({
      next: (result: VariableDesign[]) => {
        console.log('[RESPONSE]', result);

        this.dataSource = new MatTableDataSource<VariableDesign>(result);
        this.dataSource.filterPredicate = (variableDesign: VariableDesign, filterValue: string) => {
          const _filterValue = this.utilsService.fn_normalize(filterValue.trim());
          const _variableName = this.utilsService.fn_normalize(variableDesign.variable.name.trim());
          const _variableDescription = this.utilsService.fn_normalize(variableDesign.variable.description.trim());
          const _variableValue = variableDesign.value ? this.utilsService.fn_normalize(variableDesign.value.trim()) : '';

          return _variableName.toLowerCase().indexOf(_filterValue) !== -1
            || _variableDescription.toLowerCase().indexOf(_filterValue) !== -1
            || _variableValue.toLowerCase().indexOf(_filterValue) !== -1;
        };
        this.dataSource.paginator = this.paginator;
        this.dataSource.sort = this.sort;
      },
    error: (error: any) => {
      console.log(error);
      this.alertService.fn_error(Messages.MSG_RULE_VARIABLE_GET_ALL_ERROR);
    },
      complete: () => {
        console.log('OK');
      }
    });
  }

  applyFilter(filterValue: string): void {
    this.dataSource.filter = filterValue.trim().toLowerCase();

    if (this.dataSource.paginator) {
      this.dataSource.paginator.firstPage();
    }
  }

  fn_resetFilter(): void {
    this.search.patchValue('');
    this.applyFilter('');
  }

  fn_applySort(sort: Sort): void {
    const data = this.dataSource.data;
    if (!sort.active || sort.direction === '') {
      this.dataSource.data = data.sort((a, b) => {
        return this.utilsService.fn_compare(a.id, b.id, true);
      });
      return;
    }

    this.dataSource.data = data.sort((a, b) => {
      const isAsc = sort.direction === 'asc';
      switch (sort.active) {
        case 'id': return this.utilsService.fn_compare(a.id, b.id, isAsc);
        case 'name': return this.utilsService.fn_compare(a.variable.name, b.variable.name, isAsc);
        case 'description': return this.utilsService.fn_compare(a.variable.description, b.variable.description, isAsc);
        default: return 0;
      }
    });
  }

  fn_refresh(): void {
    this.fn_getAllVariableDesign();
    this.fn_resetFilter();
  }

  /**
   * Edit variable
   */
  fn_openDialogForEdit(variableDesign: VariableDesign): void {
    console.log('variableDesign: ', variableDesign);

    const dialogRef = this.dialog.open(RuleVariableDialogComponent, {
      width: '500px',
      data: {
        variableDesign: variableDesign,
        listDataType: this.listDataType
      }
    });

    dialogRef.afterClosed().subscribe((result: VariableDesign) => {
      if (result !== undefined) {
        console.log('Updating...', result);
        this.variableDesignService.fn_update(result).subscribe({
          next: (result: VariableDesign) => {
            console.log('[RESPONSE]', result);
            if (result.id) {
              this.alertService.fn_success(Messages.MSG_RULE_VARIABLE_UPDATE_SUCCESS);
            } else {
              this.alertService.fn_error(Messages.MSG_RULE_VARIABLE_UPDATE_ERROR);
            }

            this.fn_refresh();
          },
          error: (error: any) => {
            console.log(error);
            this.alertService.fn_error(Messages.MSG_RULE_VARIABLE_UPDATE_ERROR);
          },
          complete: () => {
            console.log('OK');
          }
        });
      }
    });
  }

  /**
   * Delete variable
   */
  fn_openDialogForDelete(variableDesign: VariableDesign): void {
    console.log('variableDesign: ', variableDesign);

    const dialogRef = this.dialog.open(ConfirmationDialogComponent, {
      width: '500px',
      data: {
        title: 'Eliminar',
        info: 'La variable <strong>' + variableDesign.variable.name + '</strong> serÃ¡ eliminada'
      }
    });

    dialogRef.afterClosed().subscribe((result: boolean) => {
      if (result === true) {
        this.variableDesignService.fn_delete(variableDesign).subscribe({
          next: (result: boolean) => {
            console.log('[RESPONSE]', result);
            if (result === true) {
              this.alertService.fn_success(Messages.MSG_RULE_VARIABLE_DELETE_SUCCESS);
            } else {
              this.alertService.fn_error(Messages.MSG_RULE_VARIABLE_DELETE_ERROR);
            }

            this.fn_refresh();
          },
          error: (error: any) => {
            console.log(error);
            this.alertService.fn_error(Messages.MSG_RULE_VARIABLE_DELETE_ERROR);
          },
          complete: () => {
            console.log('OK');
          }
        });
      }
    });
  }
}
