import {
  Component,
  OnInit,
  ViewChild,
  Input,
  Output,
  EventEmitter
} from '@angular/core';
import { FormBuilder, FormGroup, Validators, FormArray } from '@angular/forms';
import {
  TreeModel,
  NodeEvent,
  Ng2TreeSettings,
  MenuItemSelectedEvent,
  NodeMenuItemAction
} from 'ng2-tree';
import { TreeService } from './tree.service';
import { MatMenuTrigger } from '@angular/material';
import { of } from 'rxjs';
import { filter, switchMap } from 'rxjs/operators';

export class WindowNode {
  name: string;
  windowId: string;
  children?: WindowNode[];
}

/** Flat to-do item node with expandable and level information */
export class WindowFlatNode {
  expandable: boolean;
  name: string;
  level: number;
  windowId: string;
}

const TREE_DATA: WindowNode[] = [
  {
    name: 'window_105',
    windowId: '105',
    children: [
      {
        name: 'window_106',
        windowId: '106',
        children: [
          {
            name: 'modal_109',
            windowId: '109',
            children: [{ name: 'window_112', windowId: '112' }]
          }
        ]
      },
      {
        name: 'window_110',
        windowId: '110',
        children: [{ name: 'window_111', windowId: '111' }]
      }
    ]
  }
];

@Component({
  selector: 'lib-tree',
  templateUrl: './tree.component.html',
  styleUrls: ['./tree.css']
})
export class TreeComponent implements OnInit {
  @Input() treeData;
  @Input() flowId;
  @Output() reRender = new EventEmitter();
  @Output() navigate = new EventEmitter();
  windowName: FormGroup;
  @ViewChild('treeFFS') public treeFFS;
  @ViewChild('menuTrigger') menuTrigger: MatMenuTrigger;
  private lastFFSNodeId = 86;

  public settings: Ng2TreeSettings = {
    rootIsVisible: true,
    showCheckboxes: false
  };

  private static logEvent(e: NodeEvent, message: string): void {
    console.log('logEvent ////', e, message);
  }

  constructor(private service: TreeService, private fb: FormBuilder) {}

  ngOnInit() {
    console.log('tree component', this.treeData);
    this.windowName = this.fb.group({
      name: [
        '',
        [
          Validators.required,
          Validators.minLength(4),
          Validators.maxLength(20),
          Validators.pattern('[a-zA-Z0-9]*')
        ]
      ]
    });
  }

  addWindow(node) {
    const winName = this.windowName.get('name').value;
    this.menuTrigger.closeMenu();
    this.service.addWindow(node, this.flowId, winName).subscribe(val => {
      this.reRender.emit('addWindow');
      this.windowName.setValue({ name: '' });
    });
  }

  deleteWindow(node) {
    // const nodeCtrl = this.treeFFS.getControllerByNodeId(node.id);
    // nodeCtrl.remove();
    const alerta = confirm(
      `Recuerda que si borras una ventana todos sus hijos se borrarán también. ¿Quieres continuar?`
    );
    of(alerta)
      .pipe(
        filter(val => val),
        switchMap(_ => this.service.deleteWindow(node))
      )
      .subscribe(val => {
        this.reRender.emit('deleteWindow');
      });
  }

  navigateTo(node) {
    this.navigate.emit(node);
  }

  public onNodeRemoved(e: NodeEvent): void {
    TreeComponent.logEvent(e, 'Removed');
  }

  public onNodeMoved(e: NodeEvent): void {
    TreeComponent.logEvent(e, 'Moved');
  }

  public onNodeRenamed(e: NodeEvent): void {
    TreeComponent.logEvent(e, 'Renamed');
  }

  public onNodeCreated(e: NodeEvent): void {
    TreeComponent.logEvent(e, 'Created');
  }

  public onNodeFFSCreated(e: NodeEvent, controller): void {
    TreeComponent.logEvent(e, 'Created');
    if (controller) {
      controller.changeNodeId(++this.lastFFSNodeId);
    }
  }

  public onNodeSelected(e: NodeEvent): void {
    TreeComponent.logEvent(e, 'Selected');
  }

  public onNodeUnselected(e: NodeEvent): void {
    TreeComponent.logEvent(e, 'Unselected');
  }

  public onMenuItemSelected(e: MenuItemSelectedEvent) {
    TreeComponent.logEvent(e, `You selected ${e.selectedItem} menu item`);
  }

  public onNodeExpanded(e: NodeEvent): void {
    TreeComponent.logEvent(e, 'Expanded');
  }

  public onNodeCollapsed(e: NodeEvent): void {
    TreeComponent.logEvent(e, 'Collapsed');
  }

  public handleActionOnFFS(id: number | string, action: string) {
    const treeController = this.treeFFS.getControllerByNodeId(id);
    if (treeController && typeof treeController[action] === 'function') {
      treeController[action]();
    } else {
      console.log('There isn`t a controller for a node with id - ' + id);
    }
  }

  public renameFFS(id: number | string) {
    const treeController = this.treeFFS.getControllerByNodeId(id);
    if (treeController) {
      treeController.rename('unicode.pf');
    } else {
      console.log('There isn`t a controller for a node with id - ' + id);
    }
  }

  public setChildrenFFS(id: number | string) {
    const treeController = this.treeFFS.getControllerByNodeId(id);
    if (treeController && typeof treeController.setChildren === 'function') {
      treeController.setChildren([
        { value: 'apache2', id: 82, children: [] },
        { value: 'nginx', id: 83, children: [] },
        { value: 'dhcp', id: 84, children: [] },
        { value: 'dpkg', id: 85, children: [] },
        { value: 'gdb', id: 86, children: [] }
      ]);
    } else {
      console.log('There isn`t a controller for a node with id - ' + id);
    }
  }

  public addChildFFS(id: number | string, newNode: TreeModel) {
    newNode.id = ++this.lastFFSNodeId;
    const treeController = this.treeFFS.getControllerByNodeId(id);
    if (treeController) {
      treeController.addChild(newNode);
    } else {
      console.log(`Controller is absent for a node with id: ${id}`);
    }
  }

  public checkFolder(id: number): void {
    const treeController = this.treeFFS.getControllerByNodeId(id);
    if (treeController) {
      treeController.check();
    } else {
      console.log(`Controller is absent for a node with id: ${id}`);
    }
  }

  public uncheckFolder(id: number): void {
    const treeController = this.treeFFS.getControllerByNodeId(id);
    if (treeController) {
      treeController.uncheck();
    } else {
      console.log(`Controller is absent for a node with id: ${id}`);
    }
  }
}
