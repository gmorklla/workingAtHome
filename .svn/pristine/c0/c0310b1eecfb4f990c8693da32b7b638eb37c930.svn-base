import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';
import { InputRadioService } from './input-radio.service';
import { CheckboxStyleModel } from '../../../input-checkbox/src/lib/models/checbox-style/checkbox-style.model';
import { CdkDragEnd } from '@angular/cdk/drag-drop';

@Component({
  selector: 'lib-input-radio',
  templateUrl: './input-radio.component.html',
  styleUrls: ['./input-radio.component.css']
})
export class InputRadioComponent implements OnInit {
  @Input() public ctrl;

  @Output() public rzStartE = new EventEmitter();
  @Output() public rzStopE = new EventEmitter();
  @Output() public dragEndE = new EventEmitter();

  public width: number;
  public height: number;
  public containerStyles: any;
  public stylesObj: any;
  public valor: string;
  public estilos;
  public href: string;

  constructor(private service: InputRadioService) {}

  public ngOnInit(): void {
    this.renderControl();
  }

  public renderControl(): void {
    if (this.ctrl) {
      const {
        attributes: { value, style, href }
      } = this.ctrl;
      this.estilos = style ? this.service.stringToObj(style) : {};
      this.containerStyles = this.setStylesOfContainer();

      const checkboxStyleModel: CheckboxStyleModel = this.service.generateStyleRadio(
        this.getNumValueNoPX(this.estilos.width),
        this.getNumValueNoPX(this.estilos.height),
        href
      );
      delete this.estilos['background-size'];
      const union: any = { ...checkboxStyleModel, ...this.estilos };
      this.estilos = union;
      delete this.estilos.background;
      delete this.estilos.position;
      delete this.estilos.transform;
      delete this.estilos.width;
      delete this.estilos.height;
      this.valor = value ? value : 'Mensaje';
    }
  }

  public clickOnCtrl(e: any): void {
    this.rzStartE.emit(this.ctrl);
  }

  public onResizeStop(e): void {
    this.width = e.size.width;
    this.height = e.size.height;
    this.rzStopE.emit(e.size);
  }

  public onDragEnd(event: CdkDragEnd): void {
    const transform = event.source.element.nativeElement.style.transform;
    this.dragEndE.emit(transform);
  }

  public setStylesOfContainer(): any {
    const {
      width = '100px',
      height = '100px',
      transform = 'translate3d(0,0,0)'
    } = this.estilos;
    this.width = this.getNumValueNoPX(width);
    this.height = this.getNumValueNoPX(height);
    const fObj = {
      transform: transform,
      position: 'absolute'
    };
    return { ...fObj };
  }

  public getNumValueNoPX(value): number {
    return Number(value.replace('px', ''));
  }
}
