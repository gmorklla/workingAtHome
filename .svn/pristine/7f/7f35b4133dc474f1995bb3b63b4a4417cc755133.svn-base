import {Component, Inject, OnInit} from '@angular/core';
import {FormBuilder, FormControl, FormGroup, Validators} from '@angular/forms';
import {MAT_DIALOG_DATA, MatDialogRef} from '@angular/material';
import {VariableDesign} from '../../../models/variable/variable-design.model';
import {DataType} from '../../../models/variable/data-type.model';
import {Variable} from '../../../models/variable/variable.model';
import {Status} from '../../../../models/status.enum';
import {VariableSource} from '../../../models/variable/variable-source.enum';

export interface RuleVariableDialogData {
  variableDesign: VariableDesign;
  listDataType: DataType[];
}

@Component({
  selector: 'app-rule-variable-dialog',
  templateUrl: './rule-variable-dialog.component.html',
  styleUrls: ['./rule-variable-dialog.component.css']
})
export class RuleVariableDialogComponent implements OnInit {

  public mainForm: FormGroup;

  constructor(private formBuilder: FormBuilder,
              public dialogRef: MatDialogRef<RuleVariableDialogComponent>,
              @Inject(MAT_DIALOG_DATA)
              public data: RuleVariableDialogData) {
  }

  ngOnInit() {
    this.createMainForm();
  }

  private createMainForm() {
    const variableDesign = this.data.variableDesign;

    let variableName = null;
    let variableDescription = null;
    let variableDataType = null;
    let variableValue = null;
    if (variableDesign) {
      if (variableDesign.variable) {
        variableName = variableDesign.variable.name;
        variableDescription = variableDesign.variable.description;
        variableDataType = variableDesign.variable.dataType;
      }
      variableValue = variableDesign.value;
    }

    this.mainForm = this.formBuilder.group({
      'variableName': new FormControl(variableName, [
        Validators.required
      ]),
      'value': new FormControl(variableValue),
      'variableDataType': new FormControl(variableDataType, [
        Validators.required
      ]),
      'description': new FormControl(variableDescription, [
        Validators.required
      ])
    });
  }

  /**
   * For validations
   */

  get value() {
    return this.mainForm.get('value');
  }

  get description() {
    return this.mainForm.get('description');
  }

  fn_onClose(): void {
    this.dialogRef.close();
  }

  fn_generateEntity(): VariableDesign {
    const variableDesign = new VariableDesign();
    variableDesign.id = this.data.variableDesign.id;
    variableDesign.designId = this.data.variableDesign.designId;
    variableDesign.windowId = this.data.variableDesign.windowId;
    variableDesign.htmlControlId = this.data.variableDesign.htmlControlId;

    const variable = new Variable();
    variable.name = this.mainForm.value.variableName;
    variable.description = this.mainForm.value.description;
    variable.dataType = this.mainForm.value.variableDataType;
    variable.statusId = Status.ACTIVE;
    variable.source = VariableSource.BUSINESS;
    variableDesign.variable = variable;

    variableDesign.value = this.mainForm.value.value;

    variableDesign.type = this.data.variableDesign.type;
    variableDesign.scope = this.data.variableDesign.scope;
    return variableDesign;
  }
}
