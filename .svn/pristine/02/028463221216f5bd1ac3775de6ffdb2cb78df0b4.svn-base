import { Injectable } from '@angular/core';
import {HttpClient} from '@angular/common/http';
import {target} from '../../../../banorte/src/app/shared/data/port';
import {Observable, throwError} from 'rxjs/index';
import {LinkedChannelStatus} from '../models/linked.channel.status.model';
import {Campaign} from '../models/campaign.model';
import {NgxUiLoaderService} from 'ngx-ui-loader';
import {catchError, finalize, tap} from 'rxjs/internal/operators';
import {Loadable} from '../components/loader/loadable.interface';
import {LinkedChannel} from '../models/linked.channel.model';

@Injectable()
export class LinkedChannelService implements Loadable {

  idLoader = 'loader-01';

  constructor(public http: HttpClient,
              private ngxService: NgxUiLoaderService) { }

  fn_getAllLinkedChannelStatus(): Observable<LinkedChannelStatus[]> {
    this.ngxService.startLoader(this.idLoader);
    return this.http.get<LinkedChannelStatus[]>(`${target}campaign/linked-channel/status`).pipe(
      finalize(() => {
        this.ngxService.stopLoader(this.idLoader)
      }),
      catchError(err => throwError(err))
    );
  }

  fn_link(listCampaigns: Campaign[]): Observable<boolean> {
    this.ngxService.startLoader(this.idLoader);
    return this.http.post<boolean>(`${target}campaign/linked-channel/link`, listCampaigns).pipe(
      finalize(() => {
        this.ngxService.stopLoader(this.idLoader)
      }),
      catchError(err => throwError(err))
    );
  }

  fn_dLink(linkedChannel: LinkedChannel): Observable<boolean> {
    this.ngxService.startLoader(this.idLoader);
    return this.http.post<boolean>(`${target}campaign/linked-channel/dLink`, linkedChannel).pipe(
      finalize(() => {
        this.ngxService.stopLoader(this.idLoader)
      }),
      catchError(err => throwError(err))
    );
  }
}
