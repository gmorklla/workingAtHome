import {
  Component,
  EventEmitter,
  Input,
  OnInit,
  Output,
  OnChanges,
  SimpleChanges
} from '@angular/core';
import { FormBuilder, FormGroup, Validators, FormArray } from '@angular/forms';
import {
  debounceTime,
  distinctUntilChanged,
  filter,
  switchMap,
  tap,
  mergeMap
} from 'rxjs/operators';
import { of, iif } from 'rxjs';
import { ControlesI, EModel } from 'projects/banorte/src/app/shared/data/data';
import { FormatStylesService } from '../../../../../shared/services/format-styles.service';
import { opcionesDefault, OpcionI } from '../../../../../shared/data/data';

@Component({
  selector: 'app-general-form',
  templateUrl: './general-form.component.html',
  styleUrls: ['./general-form.component.css']
})
export class GeneralFormComponent implements OnInit, OnChanges {
  generalForm: FormGroup;
  textoGroup: FormGroup;
  borderGroup: FormGroup;
  public selectForm: FormGroup;
  public checkboxForm: FormGroup;
  public radioForm: FormGroup;
  linkForm: FormGroup;
  iframeForm: FormGroup;
  inputRangeForm: FormGroup;
  // opciones: FormArray;
  toCompare: string;
  @Input() control: ControlesI;
  @Output() propChange = new EventEmitter();
  public showMinMaxInRange: string;
  public opciones;

  constructor(
    private fb: FormBuilder,
    private formatStyles: FormatStylesService
  ) {}

  ngOnInit() {
    this.initForm();
    this.listenForm();
    this.setFormValues();
  }

  ngOnChanges(changes: SimpleChanges) {
    if (changes.control) {
      if (this.generalForm) {
        this.setFormValues();
      }
    }
  }

  initForm() {
    this.textoGroup = this.fb.group({
      fontSize: ['', Validators.required],
      textAlign: ['', Validators.required],
      fontFamily: ['', Validators.required],
      fontStyle: ['', [Validators.required]],
      lineHeight: ['', [Validators.required]]
    });
    this.borderGroup = this.fb.group({
      borderWidth: ['', [Validators.required]],
      borderStyle: ['', [Validators.required]],
      borderColor: ['', [Validators.required]],
      borderRadius: ['', [Validators.required]]
    });
    const opts = {
      width: ['', [Validators.required]],
      height: ['', [Validators.required]],
      x: ['', [Validators.required]],
      y: ['', [Validators.required]],
      color: ['', [Validators.required]],
      fondo: ['', Validators.required],
      value: ['', Validators.required],
      texto: this.textoGroup,
      border: this.borderGroup
    };
    this.generalForm = this.fb.group(opts);
  }

  listenForm() {
    this.generalForm.valueChanges
      .pipe(
        distinctUntilChanged(),
        debounceTime(1000),
        switchMap(val => of(val)),
        filter(val => JSON.stringify(val) !== this.toCompare),
        tap(val => {
          this.toCompare = JSON.stringify(val);
          const objToEmit = this.getGeneralFormValues(val);
          console.log('Before emit change on form', objToEmit);
          this.propChange.emit(objToEmit);
        })
      )
      .subscribe(_ => {});
  }

  setFormValues() {
    if (this.control.type === 'a') {
      this.setLinkForm();
    } else if (this.control.type === 'iframe') {
      this.setIframeForm();
    } else if (this.control.type === 'range') {
      this.setinputRangeForm();
      this.showMinMaxInRange = this.control.attributes['showMinMax'];
    } else if (this.control.type === 'select') {
      this.setSelectForm();
    } else if (this.control.type === 'radio') {
      this.setRadioForm();
    } else if (this.control.type === 'checkbox') {
      this.setCheckboxForm();
    }
    const value = this.control.attributes['value'];
    const valueF = value ? value : 'Mensaje';
    const styleObj = this.control.attributes['style']
      ? this.formatStyles.stringToObj(this.control.attributes['style'])
      : {};
    const {
      'text-align': textAlign = 'left',
      'font-family': fontFamily = 'Arial, Helvetica, sans-serif',
      'font-style': fontStyle = 'normal',
      'border-style': borderStyle = '',
      'border-color': borderColor = ''
    } = styleObj;
    let {
      width = '117',
      height = '22',
      'font-size': fontSize = '12',
      'line-height': lineHeight = '12',
      'border-width': borderWidth = '',
      'border-radius': borderRadius = ''
    } = styleObj;
    const {
      transform = 'translate3d(0,0,0)',
      color = 'rgb(0,0,0)',
      background = 'rgba(255,255,255,0)'
    } = styleObj;
    const coords = transform
      .slice(transform.indexOf('(') + 1, transform.indexOf(')'))
      .split(',');
    const x = this.getNumValueNoPX(coords[0]);
    const y = this.getNumValueNoPX(coords[1]);
    width = this.getNumValueNoPX(width);
    height = this.getNumValueNoPX(height);
    fontSize = this.getNumValueNoPX(fontSize);
    lineHeight = this.getNumValueNoPX(lineHeight);
    borderWidth = this.getNumValueNoPX(borderWidth);
    borderRadius = this.getNumValueNoPX(borderRadius);
    this.generalForm.setValue(
      {
        width: width,
        height: height,
        x: x,
        y: y,
        color: color,
        fondo: background,
        value: valueF,
        texto: {
          fontSize: fontSize,
          textAlign: textAlign,
          fontFamily: fontFamily,
          fontStyle: fontStyle,
          lineHeight: lineHeight
        },
        border: {
          borderWidth: borderWidth,
          borderStyle: borderStyle,
          borderColor: borderColor,
          borderRadius: borderRadius
        }
      },
      { emitEvent: false }
    );
  }

  // general

  getGeneralFormValues(val) {
    const {
      width,
      height,
      x,
      y,
      color,
      value,
      fondo,
      texto: {
        fontSize = null,
        textAlign = null,
        fontFamily = null,
        fontStyle = null,
        lineHeight = null
      } = { fontSize, textAlign, fontFamily, fontStyle, lineHeight },
      border: {
        borderWidth = null,
        borderStyle = null,
        borderColor = null,
        borderRadius = null
      } = { borderWidth, borderStyle, borderColor, borderRadius }
    } = val;
    const style = {
      width: width,
      height: height,
      x: x,
      y: y,
      color: color !== '' ? color : 'rgb(0,0,0)',
      background: fondo !== '' ? fondo : 'rgba(255,255,255,0)',
      'font-size': fontSize ? fontSize + 'px' : null,
      'text-align': textAlign,
      'font-family': fontFamily,
      'font-style': fontStyle,
      'border-width': borderWidth ? borderWidth + 'px' : null,
      'border-style': borderStyle,
      'border-color': borderColor,
      'border-radius': borderRadius ? borderRadius + 'px' : null,
      'line-height': lineHeight ? lineHeight + 'px' : null
    };
    const attrs: Array<any> = [{ value: value }];
    return { estilos: style, attrs: attrs };
  }

  // link

  setLinkForm() {
    const opts = {
      link: ['', [Validators.required]]
    };
    this.linkForm = this.fb.group(opts);
    const href = this.control.attributes['href'];
    const hrefF = href ? href : 'http://www.google.com';
    this.linkForm.setValue({
      link: hrefF
    });
    this.linkForm.valueChanges
      .pipe(
        distinctUntilChanged(),
        debounceTime(1000),
        switchMap(val => of(val)),
        tap(val => {
          const gFValues = Object.assign({}, this.generalForm.value);
          const result = this.getGeneralFormValues(gFValues);
          const { link } = val;
          result.attrs.push({ href: link });
          this.propChange.emit(result);
        })
      )
      .subscribe(_ => {});
  }

  // iframe (video)

  setIframeForm(): void {
    const opts = {
      link: ['', [Validators.required]]
    };
    this.iframeForm = this.fb.group(opts);
    const src = this.control.attributes['src'];
    const srcF = src ? src : 'http://www.google.com';
    this.iframeForm.setValue({
      link: srcF
    });
    this.iframeForm.valueChanges
      .pipe(
        distinctUntilChanged(),
        debounceTime(1000),
        switchMap(val => of(val)),
        tap(val => {
          const gFValues = Object.assign({}, this.generalForm.value);
          const result = this.getGeneralFormValues(gFValues);
          const { link } = val;
          result.attrs.push({ src: link });
          this.propChange.emit(result);
        })
      )
      .subscribe(_ => {});
  }

  // range

  public setinputRangeForm(): void {
    const opts = {
      min: ['', [Validators.required]],
      max: ['', [Validators.required]],
      step: ['', [Validators.required]],
      showMinMax: ['', [Validators.required]]
    };
    this.inputRangeForm = this.fb.group(opts);
    const min = this.control.attributes['min'];
    const minF = Number(min) ? Number(min) : 0;
    const max = this.control.attributes['max'];
    const maxF = Number(max) ? Number(max) : 0;
    const step = this.control.attributes['step'];
    const stepF = Number(step) ? Number(step) : 0;

    const showMinMax: string = this.control.attributes['showMinMax'];
    const showMinMaxF: string = showMinMax ? showMinMax : 'true';

    this.inputRangeForm.setValue({
      min: minF,
      max: maxF,
      step: stepF,
      showMinMax: showMinMaxF
    });
    this.inputRangeForm.valueChanges
      .pipe(
        distinctUntilChanged(),
        debounceTime(1000),
        switchMap(val => of(val)),
        tap(val => {
          const gFValues = Object.assign({}, this.generalForm.value);
          const result = this.getGeneralFormValues(gFValues);
          const { min, max, step, showMinMax } = val;
          result.attrs.push(
            { min: min },
            { max: max },
            { step: step },
            { showMinMax: showMinMax }
          );
          this.propChange.emit(result);
        })
      )
      .subscribe(_ => {});
  }

  // select

  public setSelectForm(): void {
    const { options } = this.control;
    const opciones = options ? options : opcionesDefault;
    const opts = {
      link: ['', [Validators.required]],
      opciones: this.fb.array([])
    };
    this.selectForm = this.fb.group(opts);
    opciones.forEach(op => this.agregaOpcion(op));
    const src = this.control.attributes['src'];
    const srcF = src ? src : '';
    this.selectForm.setValue({
      link: srcF
    });
    this.selectForm.valueChanges
      .pipe(
        distinctUntilChanged(),
        debounceTime(1000),
        switchMap(val => of(val)),
        tap(val => {
          const gFValues = Object.assign({}, this.generalForm.value);
          const generalFormValues = this.getGeneralFormValues(gFValues);
          const { link } = val;

          /*
          generalFormValues contiene tanto los atributos como los estilos.
          La siguiente linea agrega estilos especializados del select a generalFormValues
          También, si quisieramos agregar atributos usaríamos el push a generalFormValues.attrs
          hay varios ejemplos de ello.
          */
          const eModel: EModel = this.selectWithImgInArrow(generalFormValues, {
            src: link
          });
          this.propChange.emit(eModel);
        })
      )
      .subscribe(_ => {});
  }

  creaOpcion(option: OpcionI = null): FormGroup {
    return option
      ? this.fb.group({
          value: [option.value, [Validators.required]],
          viewValue: [option.viewValue, [Validators.required]]
        })
      : this.fb.group({
          value: ['', [Validators.required]],
          viewValue: ['', [Validators.required]]
        });
  }

  agregaOpcion(option: OpcionI = null): void {
    this.opciones = this.selectForm.get('opciones') as FormArray;
    this.opciones.push(this.creaOpcion(option));
  }

  public selectWithImgInArrow(generalFormValues: any, src: any): EModel {
    const eModel: EModel = generalFormValues;
    if (src) {
      eModel.estilos['background-image'] = `url(${src.src})`;
      eModel.estilos['background-position'] = 'right';
      eModel.estilos['background-repeat'] = 'no-repeat';
      eModel.estilos['background-size'] = 'contain';
      eModel.estilos['-webkit-appearance'] = 'none';
    }
    return eModel;
  }

  // radio

  public setRadioForm(): void {
    const opts = {
      link: ['', [Validators.required]]
    };
    this.radioForm = this.fb.group(opts);
    const src = this.control.attributes['src'];
    const srcF = src ? src : '';
    this.radioForm.setValue({
      link: srcF
    });
    this.radioForm.valueChanges
      .pipe(
        distinctUntilChanged(),
        debounceTime(1000),
        switchMap(val => of(val)),
        tap(val => {
          const gFValues = Object.assign({}, this.generalForm.value);
          const generalFormValues = this.getGeneralFormValues(gFValues);
          const { link } = val;
          generalFormValues.estilos['background-image'] = `url(${link})`;
          this.propChange.emit(generalFormValues);
        })
      )
      .subscribe(_ => {});
  }

  // checkbox

  public setCheckboxForm(): void {
    const opts = {
      link: ['', [Validators.required]]
    };
    this.checkboxForm = this.fb.group(opts);
    const src = this.control.attributes['src'];
    const srcF = src ? src : '';
    this.checkboxForm.setValue({
      link: srcF
    });
    this.checkboxForm.valueChanges
      .pipe(
        distinctUntilChanged(),
        debounceTime(1000),
        switchMap(val => of(val)),
        tap(val => {
          const gFValues = Object.assign({}, this.generalForm.value);
          const generalFormValues = this.getGeneralFormValues(gFValues);
          const { link } = val;
          generalFormValues.estilos['background-image'] = `url(${link})`;
          this.propChange.emit(generalFormValues);
        })
      )
      .subscribe(_ => {});
  }

  // otros

  colorSelected(e, inputName) {
    let obj;
    switch (inputName) {
      case 'color':
        obj = { color: e };
        break;
      case 'fondo':
        obj = { fondo: e };
        break;
      case 'boderColor':
        obj = {
          border: {
            borderColor: e
          }
        };
        break;
      default:
        break;
    }
    this.generalForm.patchValue(obj);
  }

  getNumValueNoPX(value): number {
    return Number(value.replace('px', ''));
  }

  deleteItem(e) {
    const confirmP = confirm('¿Quieres borrar este ' + this.control.type + '?');
    const delete$ = of(true).pipe(
      tap(val => this.propChange.emit({ delete: this.control }))
    );
    const x$ = of('X');
    of(confirmP)
      .pipe(mergeMap(val => iif(() => val, delete$, x$)))
      .subscribe(_ => {});
  }
}
